
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

/*
 * <순열>
 * N개의 숫자를 입력으로 받아 그 중 M개를 선택하는 가짓수와 M개를 선택했을 때의 결과값을 나열하시오.
 * 
 * <입력예시>
5 3
4 5 5 6 7
 */

public class Permutation {
	static int N = 0;
	static int R = 0;
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		R = sc.nextInt();
		
		// 1~N 까지 사용
		int arr[] = new int[N];
		for(int i=0; i<N; i++) {
			arr[i] =sc.nextInt();
		}
		
		// 순열 method 시작
		permutation(arr);
		
	}
	
	static void permutation(int[] arr) {
		String s = "";
		String now = "";
		String pre = "";
		Queue q = new LinkedList<String>();
		for(int i=(1<<N)-1;i>=0;i--) {
			// arr에서 1이 R개 출력되는 수를 찾는다
			if(Integer.bitCount(i)==R) {
				// 왼쪽에 0을 채워 자리수를 맞춘다.
				s = lpad(Integer.toBinaryString(i), arr.length);
				now = "";
//				System.out.println(s);
				
				// for j~N
				// 1이 있는 자리는 arr[i] 수를 출력
				// 0이 있으면 skip
				for(int j=0; j<N; j++) {
					if(s.charAt(j)=='1') {
						now = now + arr[j];
						
					}
				}
				if(!"".equals(pre)&&!now.equals(pre)) {
					q.add(now);
				}
				pre = now;
				System.out.println();
			}
		}
		for (Object object : q) {
			System.out.println(q);
		}
	}
	
	static String lpad(String num, int bit) {
		for(int i=bit-num.length(); i>0; i--) {
			num = "0"+num;
		}
		return num;
	}
}

/* 결과값
 * 
33
4 5 5 
4 5 6 
4 5 7 
4 6 5 
4 6 7 
4 7 5 
4 7 6 
5 4 5 
5 4 6 
5 4 7 
5 5 4 
5 5 6 
5 5 7 
5 6 4 
5 6 5 
5 6 7 
5 7 4 
5 7 5 
5 7 6 
6 4 5 
6 4 7 
6 5 4 
6 5 5 
6 5 7 
6 7 4 
6 7 5 
7 4 5 
7 4 6 
7 5 4 
7 5 5 
7 5 6 
7 6 4 
7 6 5 
 */